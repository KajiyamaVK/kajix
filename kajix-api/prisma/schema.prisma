generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LLMCompany {
  id          Int        @id @default(autoincrement())
  companyName String     @unique @map("company_name")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")
  isActive    Boolean    @default(true) @map("is_active")
  models      LLMModel[]

  @@map("llm_companies")
}

model StdLLMType {
  id        Int        @id @default(autoincrement())
  type      String
  isActive  Boolean    @default(true) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  models    LLMModel[]

  @@map("std_llm_types")
}

model LLMModel {
  id           Int        @id @default(autoincrement())
  displayName  String     @map("display_name")
  modelName    String     @map("model_name")
  llmCompanyId Int        @map("llm_company_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @updatedAt @map("updated_at")
  typeId       Int        @map("type_id")
  llmCompany   LLMCompany @relation(fields: [llmCompanyId], references: [id])
  type         StdLLMType @relation(fields: [typeId], references: [id])

  @@map("llm_models")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  salt      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

enum TokenType {
  EMAIL_CONFIRMATION
  EMAIL_CHANGE
  ACCESS_TOKEN
  REFRESH_TOKEN
  PASSWORD_RESET
}

enum Locale {
  en
  ptbr
}

model TmpToken {
  id          Int       @id @default(autoincrement())
  /// @required The type of token (e.g., EMAIL_CONFIRMATION)
  type        TokenType
  /// @required The email address sending the token
  emailFrom   String
  /// @required The email address receiving the token
  emailTo     String
  /// @required The unique token string
  token       String
  isExpired   Boolean   @default(false) @map("is_expired")
  /// @required When this token expires
  expiresAt   DateTime
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  isConfirmed Boolean   @default(false) @map("is_confirmed")
  isUsed      Boolean   @default(false) @map("is_used")
  /// @required The locale for the token's associated content
  locale      Locale

  @@unique([token, isExpired])
  @@map("tmp_tokens")
}

model ScrappedContent {
  id              String   @id @default(uuid())
  baseUrl         String
  scrappedUrl     String   @unique
  lastScrappedAt  DateTime @default(now())
  htmlContent     String
  markdownContent String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("scrapped_contents")
}
