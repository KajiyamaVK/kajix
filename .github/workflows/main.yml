name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20.x"
  NODE_ENV: "test"
  EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
  EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
  EMAIL_USER: ${{ secrets.EMAIL_USER }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
  DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5433/${{ secrets.POSTGRES_DATABASE }}?schema=public
  HUSKY: "0"
  CI: "true"

jobs:
  test-api:
    name: Test API
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            kajix-api/package-lock.json
            packages/types/package-lock.json

      - name: Install Root Dependencies
        run: npm ci

      - name: Install API Dependencies
        working-directory: ./kajix-api
        run: npm ci

      - name: Install Types Dependencies
        working-directory: ./packages/types
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./kajix-api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: npx prisma generate

      - name: Type Check API
        run: |
          cd ..
          npm run build:types
          cd kajix-api && npm run type-check:api

      - name: Run API Tests
        working-directory: ./kajix-api
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          NODE_ENV: ${{ env.NODE_ENV }}
          EMAIL_HOST: ${{ env.EMAIL_HOST }}
          EMAIL_PORT: ${{ env.EMAIL_PORT }}
          EMAIL_USER: ${{ env.EMAIL_USER }}
          EMAIL_PASSWORD: ${{ env.EMAIL_PASSWORD }}
          EMAIL_FROM: ${{ env.EMAIL_FROM }}
        run: |
          npm run test:db:migrate
          npm run test:api
          npm run test:api:e2e -- --forceExit

  test-ui:
    name: Test UI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: kajix-ui/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Type Check UI
        run: npm run type-check:ui

      - name: Run UI Linting
        run: npm run lint:ui

      - name: Build UI
        run: npm run build:ui

  deploy-api:
    name: Deploy API
    needs: [test-api]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: Production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: kajix-api/package-lock.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy API to Vercel
        working-directory: ./kajix-api
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_API_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-ui:
    name: Deploy UI
    needs: [test-ui]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: Production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: kajix-ui/package-lock.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy UI to Vercel
        working-directory: ./kajix-ui
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_UI_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
